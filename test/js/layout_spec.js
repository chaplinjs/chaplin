// Generated by CoffeeScript 1.4.0
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['jquery', 'underscore', 'chaplin/mediator', 'chaplin/controllers/controller', 'chaplin/views/layout', 'chaplin/views/view'], function($, _, mediator, Controller, Layout, View) {
  'use strict';
  return describe('Layout', function() {
    var createLink, expectWasNotRouted, expectWasRouted, layout, router, startupControllerContext, testController;
    layout = testController = startupControllerContext = router = null;
    createLink = function(attributes) {
      var $link, div, link;
      attributes = attributes ? _.clone(attributes) : {};
      if (attributes.href != null) {
        div = document.createElement('div');
        div.innerHTML = "<a href='" + attributes.href + "'>Hello World</a>";
        link = div.firstChild;
        delete attributes.href;
        $link = $(link);
      } else {
        $link = $(document.createElement('a'));
      }
      return $link.attr(attributes);
    };
    expectWasRouted = function(linkAttributes) {
      var args, passedCallback, passedPath, stub;
      stub = sinon.stub().yields(false);
      mediator.subscribe('!router:route', stub);
      createLink(linkAttributes).appendTo(document.body).click().remove();
      expect(stub).was.called();
      args = stub.lastCall.args;
      passedPath = args[0];
      passedCallback = args[1];
      expect(passedPath).to.be(linkAttributes.href);
      expect(passedCallback).to.be.a('function');
      mediator.unsubscribe('!router:route', stub);
      return stub;
    };
    expectWasNotRouted = function(linkAttributes) {
      var spy;
      spy = sinon.spy();
      mediator.subscribe('!router:route', spy);
      createLink(linkAttributes).appendTo(document.body).click().remove();
      expect(spy).was.notCalled();
      mediator.unsubscribe('!router:route', spy);
      return spy;
    };
    beforeEach(function() {
      layout = new Layout({
        title: 'Test Site Title'
      });
      testController = new Controller();
      testController.view = new View();
      testController.title = 'Test Controller Title';
      return startupControllerContext = {
        previousControllerName: 'null',
        controller: testController,
        controllerName: 'test',
        params: {}
      };
    });
    afterEach(function() {
      layout.dispose();
      return testController.dispose();
    });
    it('should hide the view of an inactive controller', function() {
      testController.view.$el.css('display', 'block');
      mediator.publish('beforeControllerDispose', testController);
      return expect(testController.view.$el.css('display')).to.be('none');
    });
    it('should show the view of the active controller', function() {
      var $el;
      testController.view.$el.css('display', 'none');
      mediator.publish('startupController', startupControllerContext);
      $el = testController.view.$el;
      expect($el.css('display')).to.be('block');
      expect($el.css('opacity')).to.be('1');
      return expect($el.css('visibility')).to.be('visible');
    });
    it('should set the document title', function(done) {
      mediator.publish('startupController', startupControllerContext);
      return setTimeout(function() {
        var title;
        title = "" + testController.title + " \u2013 " + layout.title;
        expect(document.title).to.be(title);
        return done();
      }, 100);
    });
    it('should route clicks on internal links', function() {
      return expectWasRouted({
        href: '/an/internal/link'
      });
    });
    it('should correctly pass the query string', function() {
      return expectWasRouted({
        href: '/another/link?foo=bar&baz=qux'
      });
    });
    it('should not route links without href attributes', function() {
      return expectWasNotRouted({
        name: 'foo'
      });
    });
    it('should not route links with empty href', function() {
      return expectWasNotRouted({
        href: ''
      });
    });
    it('should not route links to document fragments', function() {
      return expectWasNotRouted({
        href: '#foo'
      });
    });
    it('should not route links with a noscript class', function() {
      return expectWasNotRouted({
        href: '/foo',
        "class": 'noscript'
      });
    });
    it('should not route rel=external links', function() {
      return expectWasNotRouted({
        href: '/foo',
        rel: 'external'
      });
    });
    it('should not route target=blank links', function() {
      return expectWasNotRouted({
        href: '/foo',
        target: '_blank'
      });
    });
    it('should not route non-http(s) links', function() {
      expectWasNotRouted({
        href: 'mailto:a@a.com'
      });
      expectWasNotRouted({
        href: 'javascript:1+1'
      });
      return expectWasNotRouted({
        href: 'tel:1488'
      });
    });
    it('should not route clicks on external links', function() {
      var windowOpenStub;
      windowOpenStub = sinon.stub(window, 'open');
      expectWasNotRouted({
        href: 'http://example.com/'
      });
      expectWasNotRouted({
        href: 'https://example.com/'
      });
      expect(windowOpenStub).was.notCalled();
      return windowOpenStub.restore();
    });
    it('should route clicks on elements with the “go-to” class', function() {
      var $span, args, path, stub;
      stub = sinon.stub().yields(true);
      mediator.subscribe('!router:route', stub);
      path = '/an/internal/link';
      $span = $(document.createElement('span')).addClass('go-to').attr('data-href', path).appendTo(document.body).click().remove();
      expect(stub).was.called();
      args = stub.lastCall.args;
      expect(args[0]).to.be(path);
      expect(args[1]).to.be.a('function');
      return mediator.unsubscribe('!router:route', stub);
    });
    it('routeLinks=false should NOT route clicks on internal links', function() {
      layout.dispose();
      layout = new Layout({
        title: '',
        routeLinks: false
      });
      return expectWasNotRouted({
        href: '/an/internal/link'
      });
    });
    it('openExternalToBlank=true should open external links in a new tab', function() {
      var windowOpenStub;
      windowOpenStub = sinon.stub(window, 'open');
      layout.dispose();
      layout = new Layout({
        title: '',
        openExternalToBlank: true
      });
      expectWasNotRouted({
        href: 'http://www.example.org/'
      });
      expect(windowOpenStub).was.called();
      return windowOpenStub.restore();
    });
    it('skipRouting=false should route links with a noscript class', function() {
      layout.dispose();
      layout = new Layout({
        title: '',
        skipRouting: false
      });
      return expectWasRouted({
        href: '/foo',
        "class": 'noscript'
      });
    });
    it('skipRouting=function should decide whether to route', function() {
      var args, path, stub;
      path = '/foo';
      stub = sinon.stub().returns(false);
      layout.dispose();
      layout = new Layout({
        title: '',
        skipRouting: stub
      });
      expectWasNotRouted({
        href: path
      });
      expect(stub).was.calledOnce();
      args = stub.lastCall.args;
      expect(args[0]).to.be(path);
      expect(args[1]).to.be.an('object');
      expect(args[1].nodeName).to.be('A');
      layout.dispose();
      stub = sinon.stub().returns(true);
      layout = new Layout({
        title: '',
        skipRouting: stub
      });
      expectWasRouted({
        href: path
      });
      expect(stub).was.calledOnce();
      expect(args[0]).to.be(path);
      expect(args[1]).to.be.an('object');
      return expect(args[1].nodeName).to.be('A');
    });
    it('should register event handlers on the document declaratively', function() {
      var TestLayout, el, spy1, spy2;
      spy1 = sinon.spy();
      spy2 = sinon.spy();
      layout.dispose();
      TestLayout = (function(_super) {

        __extends(TestLayout, _super);

        function TestLayout() {
          return TestLayout.__super__.constructor.apply(this, arguments);
        }

        TestLayout.prototype.events = {
          'click #testbed': 'testClickHandler',
          click: spy2
        };

        TestLayout.prototype.testClickHandler = spy1;

        return TestLayout;

      })(Layout);
      layout = new TestLayout;
      el = $('#testbed');
      el.click();
      expect(spy1).was.called();
      expect(spy2).was.called();
      layout.dispose();
      el.click();
      expect(spy1.callCount).to.be(1);
      return expect(spy2.callCount).to.be(1);
    });
    it('should register event handlers on the document programatically', function() {
      var el, spy1, spy2;
      expect(layout.delegateEvents).to.be(Backbone.View.prototype.delegateEvents);
      expect(layout.undelegateEvents).to.be(Backbone.View.prototype.undelegateEvents);
      expect(layout.delegateEvents).to.be.a('function');
      expect(layout.undelegateEvents).to.be.a('function');
      spy1 = sinon.spy();
      spy2 = sinon.spy();
      layout.testClickHandler = spy1;
      layout.delegateEvents({
        'click #testbed': 'testClickHandler',
        click: spy2
      });
      el = $('#testbed');
      el.click();
      expect(spy1).was.called();
      expect(spy2).was.called();
      layout.undelegateEvents();
      el.click();
      expect(spy1.callCount).to.be(1);
      return expect(spy2.callCount).to.be(1);
    });
    it('should dispose itself correctly', function() {
      var spy1, spy2;
      spy1 = sinon.spy();
      layout.subscribeEvent('foo', spy1);
      spy2 = sinon.spy();
      layout.delegateEvents({
        'click #testbed': spy2
      });
      expect(layout.dispose).to.be.a('function');
      layout.dispose();
      expect(layout.disposed).to.be(true);
      if (Object.isFrozen) {
        expect(Object.isFrozen(layout)).to.be(true);
      }
      mediator.publish('foo');
      $('#testbed').click();
      expect(spy1).was.notCalled();
      return expect(spy2).was.notCalled();
    });
    return it('should be extendable', function() {
      var DerivedLayout, derivedLayout;
      expect(Layout.extend).to.be.a('function');
      DerivedLayout = Layout.extend();
      derivedLayout = new DerivedLayout();
      expect(derivedLayout).to.be.a(Layout);
      return derivedLayout.dispose();
    });
  });
});
