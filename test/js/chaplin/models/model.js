// Generated by CoffeeScript 1.4.0
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

define(['underscore', 'backbone', 'chaplin/lib/utils', 'chaplin/lib/event_broker'], function(_, Backbone, utils, EventBroker) {
  'use strict';

  var Model;
  return Model = (function(_super) {
    var serializeAttributes;

    __extends(Model, _super);

    function Model() {
      return Model.__super__.constructor.apply(this, arguments);
    }

    _(Model.prototype).extend(EventBroker);

    Model.prototype.initDeferred = function() {
      return _(this).extend($.Deferred());
    };

    Model.prototype.getAttributes = function() {
      return this.attributes;
    };

    serializeAttributes = function(model, attributes, modelStack) {
      var delegator, item, key, value;
      if (!modelStack) {
        delegator = utils.beget(attributes);
        modelStack = [model];
      } else {
        modelStack.push(model);
      }
      for (key in attributes) {
        value = attributes[key];
        if (value instanceof Backbone.Model) {
          if (delegator == null) {
            delegator = utils.beget(attributes);
          }
          delegator[key] = value === model || __indexOf.call(modelStack, value) >= 0 ? null : serializeAttributes(value, value.getAttributes(), modelStack);
        } else if (value instanceof Backbone.Collection) {
          if (delegator == null) {
            delegator = utils.beget(attributes);
          }
          delegator[key] = (function() {
            var _i, _len, _ref, _results;
            _ref = value.models;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              item = _ref[_i];
              _results.push(serializeAttributes(item, item.getAttributes(), modelStack));
            }
            return _results;
          })();
        }
      }
      modelStack.pop();
      return delegator || attributes;
    };

    Model.prototype.serialize = function() {
      return serializeAttributes(this, this.getAttributes());
    };

    Model.prototype.disposed = false;

    Model.prototype.dispose = function() {
      var prop, properties, _i, _len;
      if (this.disposed) {
        return;
      }
      this.trigger('dispose', this);
      this.unsubscribeAllEvents();
      this.off();
      if (typeof this.reject === "function") {
        this.reject();
      }
      properties = ['collection', 'attributes', 'changed', '_escapedAttributes', '_previousAttributes', '_silent', '_pending', '_callbacks'];
      for (_i = 0, _len = properties.length; _i < _len; _i++) {
        prop = properties[_i];
        delete this[prop];
      }
      this.disposed = true;
      return typeof Object.freeze === "function" ? Object.freeze(this) : void 0;
    };

    return Model;

  })(Backbone.Model);
});
