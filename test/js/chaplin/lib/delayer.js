// Generated by CoffeeScript 1.4.0

define(function() {
  'use strict';

  var Delayer;
  Delayer = {
    setTimeout: function(name, time, handler) {
      var handle, wrappedHandler, _ref,
        _this = this;
      if ((_ref = this.timeouts) == null) {
        this.timeouts = {};
      }
      this.clearTimeout(name);
      wrappedHandler = function() {
        delete _this.timeouts[name];
        return handler();
      };
      handle = setTimeout(wrappedHandler, time);
      this.timeouts[name] = handle;
      return handle;
    },
    clearTimeout: function(name) {
      if (!(this.timeouts && (this.timeouts[name] != null))) {
        return;
      }
      clearTimeout(this.timeouts[name]);
      delete this.timeouts[name];
    },
    clearAllTimeouts: function() {
      var handle, name, _ref;
      if (!this.timeouts) {
        return;
      }
      _ref = this.timeouts;
      for (name in _ref) {
        handle = _ref[name];
        this.clearTimeout(name);
      }
    },
    setInterval: function(name, time, handler) {
      var handle, _ref;
      this.clearInterval(name);
      if ((_ref = this.intervals) == null) {
        this.intervals = {};
      }
      handle = setInterval(handler, time);
      this.intervals[name] = handle;
      return handle;
    },
    clearInterval: function(name) {
      if (!(this.intervals && this.intervals[name])) {
        return;
      }
      clearInterval(this.intervals[name]);
      delete this.intervals[name];
    },
    clearAllIntervals: function() {
      var handle, name, _ref;
      if (!this.intervals) {
        return;
      }
      _ref = this.intervals;
      for (name in _ref) {
        handle = _ref[name];
        this.clearInterval(name);
      }
    },
    clearDelayed: function() {
      this.clearAllTimeouts();
      this.clearAllIntervals();
    }
  };
  if (typeof Object.freeze === "function") {
    Object.freeze(Delayer);
  }
  return Delayer;
});
