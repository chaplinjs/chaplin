// Generated by CoffeeScript 1.4.0
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

define(['jquery', 'underscore', 'backbone', 'chaplin/lib/utils', 'chaplin/lib/event_broker'], function($, _, Backbone, utils, EventBroker) {
  'use strict';

  var Layout;
  return Layout = (function() {

    Layout.extend = Backbone.Model.extend;

    _(Layout.prototype).extend(EventBroker);

    Layout.prototype.title = '';

    Layout.prototype.events = {};

    Layout.prototype.el = document;

    Layout.prototype.$el = $(document);

    Layout.prototype.cid = 'chaplin-layout';

    function Layout() {
      this.openLink = __bind(this.openLink, this);
      this.initialize.apply(this, arguments);
    }

    Layout.prototype.initialize = function(options) {
      if (options == null) {
        options = {};
      }
      this.title = options.title;
      this.settings = _(options).defaults({
        titleTemplate: _.template("<%= subtitle %> \u2013 <%= title %>"),
        openExternalToBlank: false,
        routeLinks: 'a, .go-to',
        skipRouting: '.noscript',
        scrollTo: [0, 0]
      });
      this.subscribeEvent('beforeControllerDispose', this.hideOldView);
      this.subscribeEvent('startupController', this.showNewView);
      this.subscribeEvent('startupController', this.adjustTitle);
      if (this.settings.routeLinks) {
        this.startLinkRouting();
      }
      return this.delegateEvents();
    };

    Layout.prototype.delegateEvents = Backbone.View.prototype.delegateEvents;

    Layout.prototype.undelegateEvents = Backbone.View.prototype.undelegateEvents;

    Layout.prototype.hideOldView = function(controller) {
      var scrollTo, view;
      scrollTo = this.settings.scrollTo;
      if (scrollTo) {
        window.scrollTo(scrollTo[0], scrollTo[1]);
      }
      view = controller.view;
      if (view) {
        return view.$el.css('display', 'none');
      }
    };

    Layout.prototype.showNewView = function(context) {
      var view;
      view = context.controller.view;
      if (view) {
        return view.$el.css({
          display: 'block',
          opacity: 1,
          visibility: 'visible'
        });
      }
    };

    Layout.prototype.adjustTitle = function(context) {
      var subtitle, title;
      title = this.title || '';
      subtitle = context.controller.title || '';
      title = this.settings.titleTemplate({
        title: title,
        subtitle: subtitle
      });
      return setTimeout((function() {
        return document.title = title;
      }), 50);
    };

    Layout.prototype.startLinkRouting = function() {
      if (this.settings.routeLinks) {
        return $(document).on('click', this.settings.routeLinks, this.openLink);
      }
    };

    Layout.prototype.stopLinkRouting = function() {
      if (this.settings.routeLinks) {
        return $(document).off('click', this.settings.routeLinks);
      }
    };

    Layout.prototype.openLink = function(event) {
      var $el, el, href, internal, isAnchor, path, skipRouting, type, _ref, _ref1;
      if (utils.modifierKeyPressed(event)) {
        return;
      }
      el = event.currentTarget;
      $el = $(el);
      isAnchor = el.nodeName === 'A';
      href = $el.attr('href') || $el.data('href') || null;
      if (href === null || href === void 0 || href === '' || href.charAt(0) === '#') {
        return;
      }
      if (isAnchor && ($el.attr('target') === '_blank' || $el.attr('rel') === 'external' || ((_ref = el.protocol) !== 'http:' && _ref !== 'https:' && _ref !== 'file:'))) {
        return;
      }
      skipRouting = this.settings.skipRouting;
      type = typeof skipRouting;
      if (type === 'function' && !skipRouting(href, el) || type === 'string' && $el.is(skipRouting)) {
        return;
      }
      internal = !isAnchor || ((_ref1 = el.hostname) === location.hostname || _ref1 === '');
      if (!internal) {
        if (this.settings.openExternalToBlank) {
          event.preventDefault();
          window.open(el.href);
        }
        return;
      }
      if (isAnchor) {
        path = el.pathname + el.search;
        if (path.charAt(0) !== '/') {
          path = "/" + path;
        }
      } else {
        path = href;
      }
      this.publishEvent('!router:route', path, function(routed) {
        if (routed) {
          event.preventDefault();
        } else if (!isAnchor) {
          location.href = path;
        }
      });
    };

    Layout.prototype.disposed = false;

    Layout.prototype.dispose = function() {
      if (this.disposed) {
        return;
      }
      this.stopLinkRouting();
      this.unsubscribeAllEvents();
      this.undelegateEvents();
      delete this.title;
      this.disposed = true;
      return typeof Object.freeze === "function" ? Object.freeze(this) : void 0;
    };

    return Layout;

  })();
});
