// Generated by CoffeeScript 1.4.0
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['underscore', 'jquery', 'chaplin/models/model', 'chaplin/models/collection', 'chaplin/views/view', 'chaplin/views/collection_view', 'chaplin/lib/sync_machine'], function(_, jQuery, Model, Collection, View, CollectionView, SyncMachine) {
  'use strict';
  return describe('CollectionView', function() {
    var CustomViewCollectionView, ItemView, MixedCollectionView, TemplatedCollectionView, TestCollectionView, addOne, addThree, collection, collectionView, fillCollection, getAllChildren, getViewChildren, viewsMatchCollection;
    collection = collectionView = null;
    ItemView = (function(_super) {

      __extends(ItemView, _super);

      function ItemView() {
        return ItemView.__super__.constructor.apply(this, arguments);
      }

      ItemView.prototype.tagName = 'li';

      ItemView.prototype.initialize = function() {
        ItemView.__super__.initialize.apply(this, arguments);
        return this.$el.attr({
          id: this.model.id,
          cid: this.model.cid
        });
      };

      ItemView.prototype.templateFunction = function(templateData) {
        return templateData.title;
      };

      ItemView.prototype.getTemplateFunction = function() {
        return this.templateFunction;
      };

      return ItemView;

    })(View);
    TestCollectionView = (function(_super) {

      __extends(TestCollectionView, _super);

      function TestCollectionView() {
        return TestCollectionView.__super__.constructor.apply(this, arguments);
      }

      TestCollectionView.prototype.tagName = 'ul';

      TestCollectionView.prototype.animationDuration = 0;

      TestCollectionView.prototype.itemView = ItemView;

      return TestCollectionView;

    })(CollectionView);
    CustomViewCollectionView = (function(_super) {

      __extends(CustomViewCollectionView, _super);

      function CustomViewCollectionView() {
        return CustomViewCollectionView.__super__.constructor.apply(this, arguments);
      }

      CustomViewCollectionView.prototype.tagName = 'ul';

      CustomViewCollectionView.prototype.animationDuration = 0;

      CustomViewCollectionView.prototype.getView = function(model) {
        return new ItemView({
          model: model
        });
      };

      return CustomViewCollectionView;

    })(CollectionView);
    TemplatedCollectionView = (function(_super) {

      __extends(TemplatedCollectionView, _super);

      function TemplatedCollectionView() {
        return TemplatedCollectionView.__super__.constructor.apply(this, arguments);
      }

      TemplatedCollectionView.prototype.listSelector = '> ol';

      TemplatedCollectionView.prototype.fallbackSelector = '> .fallback';

      TemplatedCollectionView.prototype.loadingSelector = '> .loading';

      TemplatedCollectionView.prototype.templateFunction = function(templateData) {
        return "<h2>TemplatedCollectionView</h2>\n<ol></ol>\n<p class=\"loading\">Loadingâ€¦</p>\n<p class=\"fallback\">This list is empty.</p>";
      };

      TemplatedCollectionView.prototype.getTemplateFunction = function() {
        return this.templateFunction;
      };

      return TemplatedCollectionView;

    })(TestCollectionView);
    MixedCollectionView = (function(_super) {

      __extends(MixedCollectionView, _super);

      function MixedCollectionView() {
        return MixedCollectionView.__super__.constructor.apply(this, arguments);
      }

      MixedCollectionView.prototype.itemSelector = 'li';

      MixedCollectionView.prototype.templateFunction = function(templateData) {
        return "<p>foo</p>\n<div>bar</div>\n<article>qux</article>\n<ul>\n  <li>nested</li>\n</ul>";
      };

      MixedCollectionView.prototype.getTemplateFunction = function() {
        return this.templateFunction;
      };

      return MixedCollectionView;

    })(TestCollectionView);
    fillCollection = function() {
      var code, models;
      models = (function() {
        var _i, _results;
        _results = [];
        for (code = _i = 65; _i <= 90; code = ++_i) {
          _results.push({
            id: String.fromCharCode(code),
            title: String(Math.random())
          });
        }
        return _results;
      })();
      return collection.reset(models);
    };
    addOne = function() {
      var model;
      model = new Model({
        id: 'one',
        title: 'one'
      });
      collection.add(model);
      return model;
    };
    addThree = function() {
      var model1, model2, model3;
      model1 = new Model({
        id: 'new1',
        title: 'new'
      });
      model2 = new Model({
        id: 'new2',
        title: 'new'
      });
      model3 = new Model({
        id: 'new3',
        title: 'new'
      });
      collection.add(model1, {
        at: 0
      });
      collection.add(model2, {
        at: 10
      });
      collection.add(model3);
      return [model1, model2, model3];
    };
    getViewChildren = function() {
      return collectionView.$list.children(collectionView.itemSelector);
    };
    getAllChildren = function() {
      return collectionView.$el.children();
    };
    viewsMatchCollection = function() {
      var children;
      children = getViewChildren();
      expect(children.length).to.be(collection.length);
      return collection.each(function(model, index) {
        var $el, actualId, actualTitle, expectedId, expectedTitle;
        $el = children.eq(index);
        expectedId = String(model.id);
        actualId = $el.attr('id');
        expect(actualId).to.be(expectedId);
        expectedTitle = model.get('title');
        if (expectedTitle != null) {
          actualTitle = $el.text();
          return expect(actualTitle).to.be(expectedTitle);
        }
      });
    };
    beforeEach(function() {
      collection = new Collection();
      collectionView = new TestCollectionView({
        collection: collection
      });
      return fillCollection();
    });
    afterEach(function() {
      collectionView.dispose();
      collection.dispose();
      return collectionView = collection = null;
    });
    it('should render item views', function() {
      return viewsMatchCollection();
    });
    it('should call a custom getView method', function() {
      collectionView.dispose();
      collectionView = new CustomViewCollectionView({
        collection: collection
      });
      return viewsMatchCollection();
    });
    it('should have a visibleItems array', function() {
      var visibleItems;
      visibleItems = collectionView.visibleItems;
      expect(visibleItems).to.be.an('array');
      expect(visibleItems.length).to.be(collection.length);
      return collection.each(function(model, index) {
        return expect(visibleItems[index]).to.be(model);
      });
    });
    it('should fire visibilityChange events', function() {
      var visibilityChange;
      collection.reset();
      visibilityChange = sinon.spy();
      collectionView.on('visibilityChange', visibilityChange);
      addOne();
      expect(visibilityChange).was.calledWith(collectionView.visibleItems);
      return expect(collectionView.visibleItems.length).to.be(1);
    });
    it('should add views when collection items are added', function() {
      addThree();
      return viewsMatchCollection();
    });
    it('should remove views when collection items are removed', function() {
      var models;
      models = addThree();
      collection.remove(models);
      return viewsMatchCollection();
    });
    it('should remove all views when collection is emptied', function() {
      var children;
      collection.reset();
      children = getViewChildren();
      return expect(children.length).to.be(0);
    });
    it('should reuse views on reset', function() {
      var model1, model2, newView1, view1, view2;
      expect(collectionView.getItemViews()).to.be.an('object');
      model1 = collection.at(0);
      view1 = collectionView.subview("itemView:" + model1.cid);
      expect(view1).to.be.an(ItemView);
      model2 = collection.at(1);
      view2 = collectionView.subview("itemView:" + model2.cid);
      expect(view2).to.be.an(ItemView);
      collection.reset(model1);
      expect(view1.disposed).to.be(false);
      expect(view2.disposed).to.be(true);
      newView1 = collectionView.subview("itemView:" + model1.cid);
      return expect(newView1).to.be(view1);
    });
    it('should insert views in the right order', function() {
      var baseResetAndCheck, full, m0, m1, m2, m3, m4, m5, makeResetAndCheck, resetAndCheck;
      m0 = new Model({
        id: 0
      });
      m1 = new Model({
        id: 1
      });
      m2 = new Model({
        id: 2
      });
      m3 = new Model({
        id: 3
      });
      m4 = new Model({
        id: 4
      });
      m5 = new Model({
        id: 5
      });
      baseResetAndCheck = function(setup, models) {
        collection.reset(setup);
        collection.reset(models);
        return viewsMatchCollection();
      };
      makeResetAndCheck = function(setup) {
        return function(models) {
          return baseResetAndCheck(setup, models);
        };
      };
      full = [m0, m1, m2, m3, m4, m5];
      resetAndCheck = makeResetAndCheck(full);
      resetAndCheck([m1, m2, m3, m4, m5]);
      resetAndCheck([m0, m1, m2, m3, m4]);
      resetAndCheck([m0, m1, m4, m5]);
      resetAndCheck([m1, m3, m5]);
      resetAndCheck([m0, m2, m4]);
      resetAndCheck = makeResetAndCheck([m1, m2, m3]);
      resetAndCheck([m0, m1, m2, m3]);
      resetAndCheck([m1, m2, m3, m4]);
      baseResetAndCheck([m0, m1, m4, m5], full);
      makeResetAndCheck([m1, m3, m5], full);
      makeResetAndCheck([m0, m2, m4], full);
      baseResetAndCheck([m0, m2, m3], [m1, m2, m3]);
      baseResetAndCheck([m0, m2, m5], [m0, m3, m5]);
      baseResetAndCheck([m0, m2, m5], [m0, m3, m5]);
      baseResetAndCheck([m0, m2, m3, m5], [m0, m3, m4, m5]);
      baseResetAndCheck([m0, m1, m2, m3], [m0, m2, m1, m3]);
      return baseResetAndCheck([m0, m1, m2], [m3, m4, m5]);
    });
    it('should respect the autoRender and renderItems options', function() {
      var children, renderAllItemsSpy, renderSpy;
      collectionView.dispose();
      renderSpy = sinon.spy(CollectionView.prototype, 'render');
      renderAllItemsSpy = sinon.spy(CollectionView.prototype, 'renderAllItems');
      collectionView = new TestCollectionView({
        collection: collection,
        autoRender: false,
        renderItems: false
      });
      expect(renderSpy).was.notCalled();
      expect(renderAllItemsSpy).was.notCalled();
      children = getAllChildren();
      expect(children.length).to.be(0);
      expect(_.has(collectionView, '$list')).to.be(false);
      collectionView.render();
      expect(collectionView.$list).to.be.a(jQuery);
      expect(collectionView.$list.length).to.be(1);
      collectionView.renderAllItems();
      viewsMatchCollection();
      renderSpy.restore();
      return renderAllItemsSpy.restore();
    });
    it('should dispose itself correctly', function() {
      var cid, model, prop, view, viewsByCid, _i, _len, _ref, _results;
      expect(collectionView.dispose).to.be.a('function');
      model = collection.at(0);
      viewsByCid = collectionView.getItemViews();
      expect(collectionView.disposed).to.be(false);
      for (cid in viewsByCid) {
        view = viewsByCid[cid];
        expect(view.disposed).to.be(false);
      }
      collectionView.dispose();
      expect(collectionView.disposed).to.be(true);
      for (cid in viewsByCid) {
        view = viewsByCid[cid];
        expect(view.disposed).to.be(true);
      }
      _ref = ['visibleItems'];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        prop = _ref[_i];
        _results.push(expect(_.has(collectionView, prop)).to.be(false));
      }
      return _results;
    });
    describe('CollectionView filtering', function() {
      it('should filter views using the filterer', function() {
        var filterer;
        addThree();
        filterer = sinon.spy(function(model, position) {
          expect(model).to.be.a(Model);
          expect(position).to.be.a('number');
          return true;
        });
        collectionView.filter(filterer);
        return expect(filterer.callCount).to.be(collection.length);
      });
      it('should hide filtered views per default', function() {
        var children;
        addThree();
        collectionView.filter(function(model) {
          return model.get('title') === 'new';
        });
        children = getViewChildren();
        return collection.each(function(model, index) {
          var $el, displayValue, visible;
          $el = children.eq(index);
          visible = model.get('title') === 'new';
          displayValue = $el.css('display');
          if (visible) {
            return expect(displayValue).not.to.be('none');
          } else {
            return expect(displayValue).to.be('none');
          }
        });
      });
      it('should remove the filter', function() {
        var children;
        addThree();
        collectionView.filter(function(model) {
          return model.get('title') === 'new';
        });
        collectionView.filter(null);
        children = getViewChildren();
        children.each(function(index, element) {
          var displayValue;
          displayValue = jQuery(element).css('display');
          return expect(displayValue).not.to.be('none');
        });
        return expect(collectionView.visibleItems.length).to.be(collection.length);
      });
      it('should save the filterer', function() {
        var filterer;
        addThree();
        filterer = function() {
          return false;
        };
        collectionView.filter(filterer);
        expect(collectionView.filterer).to.be(filterer);
        collectionView.filter(null);
        return expect(collectionView.filterer).to.be(null);
      });
      it('should trigger visibilityChange and update visibleItems when filtering', function() {
        var visibilityChange;
        addThree();
        expect(collectionView.visibleItems.length).to.be(collection.length);
        visibilityChange = sinon.spy();
        collectionView.on('visibilityChange', visibilityChange);
        collectionView.filter(function(model) {
          return model.get('title') === 'new';
        });
        expect(visibilityChange).was.calledOnce();
        expect(visibilityChange.args[0].length).to.be(1);
        expect(visibilityChange.args[0][0]).to.be(collectionView.visibleItems);
        expect(collectionView.visibleItems.length).to.be(3);
        collectionView.filter(null);
        return expect(collectionView.visibleItems.length).to.be(collection.length);
      });
      it('should filter views with a callback', function() {
        var children, filterCallback, filterer;
        addThree();
        filterer = function(model) {
          return model.get('title') === 'new';
        };
        filterCallback = sinon.spy(function(view, included) {
          return view.$el.toggleClass('included', included);
        });
        collectionView.filter(filterer, filterCallback);
        expect(filterCallback.callCount).to.be(collection.length);
        children = getViewChildren();
        return collection.each(function(model, index) {
          var call, included, view;
          call = filterCallback.getCall(index);
          view = collectionView.subview("itemView:" + model.cid);
          included = filterer(model, index);
          expect(call.calledWith(view, included)).to.be(true);
          return expect(children.eq(index).hasClass('included')).to.be(included);
        });
      });
      return it('should respect the filterer option', function() {
        var children, filterer;
        filterer = function(model) {
          return model.id === 'A';
        };
        collectionView.dispose();
        collectionView = new TestCollectionView({
          collection: collection,
          filterer: filterer
        });
        expect(collectionView.filterer).to.be(filterer);
        expect(collectionView.visibleItems.length).to.be(1);
        children = getViewChildren();
        return expect(children.length).to.be(collection.length);
      });
    });
    return describe('TemplatedCollectionView', function() {
      beforeEach(function() {
        _.extend(collection, SyncMachine);
        collectionView.dispose();
        return collectionView = new TemplatedCollectionView({
          collection: collection
        });
      });
      it('should render the template', function() {
        var children;
        children = getAllChildren();
        return expect(children.length).to.be(4);
      });
      it('should append views to the listSelector', function() {
        var $list, $list2, children;
        $list = collectionView.$list;
        expect($list).to.be.a(jQuery);
        expect($list.length).to.be(1);
        $list2 = collectionView.$(collectionView.listSelector);
        expect($list.get(0)).to.be($list2.get(0));
        children = getViewChildren();
        return expect(children.length).to.be(collection.length);
      });
      it('should set the fallback element properly', function() {
        var $fallback, $fallback2;
        $fallback = collectionView.$fallback;
        expect($fallback).to.be.a(jQuery);
        expect($fallback.length).to.be(1);
        $fallback2 = collectionView.$(collectionView.fallbackSelector);
        return expect($fallback.get(0)).to.be($fallback2.get(0));
      });
      it('should show the fallback element properly', function() {
        var $fallback;
        $fallback = collectionView.$fallback;
        collection.unsync();
        expect($fallback.css('display')).to.be('none');
        collection.beginSync();
        expect($fallback.css('display')).to.be('none');
        collection.finishSync();
        expect($fallback.css('display')).to.be('none');
        collection.reset();
        collection.unsync();
        expect($fallback.css('display')).to.be('none');
        collection.beginSync();
        expect($fallback.css('display')).to.be('none');
        collection.finishSync();
        expect($fallback.css('display')).to.be('block');
        addOne();
        return expect($fallback.css('display')).to.be('none');
      });
      it('should show fallback after filtering all items', function() {
        var filterer;
        collection.beginSync();
        collection.finishSync();
        filterer = function(model) {
          return false;
        };
        collectionView.dispose();
        collectionView = new TemplatedCollectionView({
          collection: collection,
          filterer: filterer
        });
        expect(collectionView.filterer).to.be(filterer);
        expect(collectionView.visibleItems.length).to.be(0);
        return expect(collectionView.$fallback.css('display')).to.be('block');
      });
      it('should set the loading indicator properly', function() {
        var $loading, $loading2;
        $loading = collectionView.$loading;
        expect($loading).to.be.a(jQuery);
        expect($loading.length).to.be(1);
        $loading2 = collectionView.$(collectionView.loadingSelector);
        return expect($loading.get(0)).to.be($loading.get(0));
      });
      it('should show the loading indicator properly', function() {
        var $loading;
        $loading = collectionView.$loading;
        collection.unsync();
        expect($loading.css('display')).to.be('none');
        collection.beginSync();
        expect($loading.css('display')).to.be('none');
        collection.finishSync();
        expect($loading.css('display')).to.be('none');
        collection.reset();
        collection.unsync();
        expect($loading.css('display')).to.be('none');
        collection.beginSync();
        expect($loading.css('display')).to.be('block');
        collection.finishSync();
        expect($loading.css('display')).to.be('none');
        addOne();
        return expect($loading.css('display')).to.be('none');
      });
      it('should also dispose when templated', function() {
        var prop, _i, _len, _ref, _results;
        collectionView.dispose();
        _ref = ['$list', '$fallback', '$loading'];
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          prop = _ref[_i];
          _results.push(expect(_.has(collectionView, prop)).to.be(false));
        }
        return _results;
      });
      return it('should respect the itemSelector property', function() {
        var additionalLength, allChildren, viewChildren;
        collectionView.dispose();
        collectionView = new MixedCollectionView({
          collection: collection
        });
        additionalLength = 4;
        allChildren = getAllChildren();
        expect(allChildren.length).to.be(collection.length + additionalLength);
        viewChildren = getViewChildren();
        expect(viewChildren.length).to.be(collection.length);
        expect(allChildren.eq(0).get(0)).to.not.be(viewChildren.get(0));
        return expect(allChildren.eq(additionalLength).get(0)).to.be(viewChildren.get(0));
      });
    });
  });
});
