// Generated by CoffeeScript 1.4.0

define(['underscore', 'chaplin/lib/support', 'chaplin/mediator', 'chaplin/models/model'], function(_, support, mediator, Model) {
  'use strict';
  return describe('mediator', function() {
    it('should be a simple object', function() {
      return expect(mediator).to.be.an('object');
    });
    it('should have Pub/Sub methods', function() {
      expect(mediator.subscribe).to.be.a('function');
      expect(mediator.unsubscribe).to.be.a('function');
      return expect(mediator.publish).to.be.a('function');
    });
    it('should have readonly Pub/Sub methods', function() {
      var methods;
      if (!(support.propertyDescriptors && Object.getOwnPropertyDescriptor)) {
        return;
      }
      methods = ['subscribe', 'unsubscribe', 'publish', 'on'];
      return _(methods).forEach(function(property) {
        var desc;
        desc = Object.getOwnPropertyDescriptor(mediator, property);
        expect(desc.enumerable).to.be(true);
        expect(desc.writable).to.not.be.ok();
        return expect(desc.configurable).to.not.be.ok();
      });
    });
    it('should publish messages to subscribers', function() {
      var eventName, payload, spy;
      spy = sinon.spy();
      eventName = 'foo';
      payload = 'payload';
      mediator.subscribe(eventName, spy);
      mediator.publish(eventName, payload);
      expect(spy).was.calledWith(payload);
      return mediator.unsubscribe(eventName, spy);
    });
    return it('should allow to unsubscribe to events', function() {
      var eventName, payload, spy;
      spy = sinon.spy();
      eventName = 'foo';
      payload = 'payload';
      mediator.subscribe(eventName, spy);
      mediator.unsubscribe(eventName, spy);
      mediator.publish(eventName, payload);
      return expect(spy).was.neverCalledWith(payload);
    });
  });
});
