// Generated by CoffeeScript 1.4.0

define(['underscore', 'chaplin/mediator', 'chaplin/lib/event_broker'], function(_, mediator, EventBroker) {
  'use strict';
  return describe('EventBroker', function() {
    var eventBroker;
    eventBroker = _.extend({}, EventBroker);
    it('should subscribe to events', function() {
      var spy, type;
      expect(eventBroker.subscribeEvent).to.be.a('function');
      type = 'eventBrokerTest';
      spy = sinon.spy();
      eventBroker.subscribeEvent(type, spy);
      mediator.publish(type, 1, 2, 3, 4);
      expect(spy).was.calledOnce();
      expect(spy).was.calledWith(1, 2, 3, 4);
      expect(spy).was.calledOn(eventBroker);
      return mediator.unsubscribe(type, spy);
    });
    it('should not subscribe the same handler twice', function() {
      var spy, type;
      type = 'eventBrokerTest';
      spy = sinon.spy();
      eventBroker.subscribeEvent(type, spy);
      eventBroker.subscribeEvent(type, spy);
      mediator.publish(type, 1, 2, 3, 4);
      expect(spy).was.calledOnce();
      expect(spy).was.calledWith(1, 2, 3, 4);
      expect(spy).was.calledOn(eventBroker);
      return mediator.unsubscribe(type, spy);
    });
    it('should check the params when subscribing', function() {
      expect(function() {
        return eventBroker.subscribeEvent();
      }).to.throwError();
      expect(function() {
        return eventBroker.subscribeEvent(void 0, void 0);
      }).to.throwError();
      expect(function() {
        return eventBroker.subscribeEvent(1234, function() {});
      }).to.throwError();
      return expect(function() {
        return eventBroker.subscribeEvent('event', {});
      }).to.throwError();
    });
    it('should unsubscribe from events', function() {
      var spy, type;
      expect(eventBroker.unsubscribeEvent).to.be.a('function');
      type = 'eventBrokerTest';
      spy = sinon.spy();
      eventBroker.subscribeEvent(type, spy);
      eventBroker.unsubscribeEvent(type, spy);
      mediator.publish(type);
      return expect(spy).was.notCalled();
    });
    it('should check the params when unsubscribing', function() {
      expect(function() {
        return eventBroker.unsubscribeEvent();
      }).to.throwError();
      expect(function() {
        return eventBroker.unsubscribeEvent(void 0, void 0);
      }).to.throwError();
      expect(function() {
        return eventBroker.unsubscribeEvent(1234, function() {});
      }).to.throwError();
      return expect(function() {
        return eventBroker.unsubscribeEvent('event', {});
      }).to.throwError();
    });
    it('should unsubscribe from all events', function() {
      var context, spy, unrelatedHandler;
      expect(eventBroker.unsubscribeAllEvents).to.be.a('function');
      spy = sinon.spy();
      unrelatedHandler = sinon.spy();
      context = {};
      eventBroker.subscribeEvent('one', spy);
      eventBroker.subscribeEvent('two', spy);
      eventBroker.subscribeEvent('three', spy);
      mediator.subscribe('four', unrelatedHandler);
      mediator.subscribe('four', unrelatedHandler, context);
      eventBroker.unsubscribeAllEvents();
      mediator.publish('one');
      mediator.publish('two');
      mediator.publish('three');
      mediator.publish('four');
      expect(spy).was.notCalled();
      expect(unrelatedHandler).was.calledTwice();
      return mediator.unsubscribe('four', unrelatedHandler);
    });
    it('should publish events', function() {
      var spy, type;
      expect(eventBroker.publishEvent).to.be.a('function');
      type = 'eventBrokerTest';
      spy = sinon.spy();
      mediator.subscribe(type, spy);
      eventBroker.publishEvent(type, 1, 2, 3, 4);
      expect(spy).was.calledOnce();
      expect(spy).was.calledWith(1, 2, 3, 4);
      return mediator.unsubscribe(type, spy);
    });
    return it('should check the params when publishing events', function() {
      expect(function() {
        return eventBroker.publishEvent();
      }).to.throwError();
      expect(function() {
        return eventBroker.publishEvent(null);
      }).to.throwError();
      expect(function() {
        return eventBroker.publishEvent(void 0);
      }).to.throwError();
      expect(function() {
        return eventBroker.publishEvent(1234);
      }).to.throwError();
      return expect(function() {
        return eventBroker.publishEvent({});
      }).to.throwError();
    });
  });
});
