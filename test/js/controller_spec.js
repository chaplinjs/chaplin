// Generated by CoffeeScript 1.4.0
var __hasProp = {}.hasOwnProperty;

define(['underscore', 'chaplin/mediator', 'chaplin/lib/event_broker', 'chaplin/controllers/controller', 'chaplin/models/model', 'chaplin/views/view'], function(_, mediator, EventBroker, Controller, Model, View) {
  'use strict';
  return describe('Controller', function() {
    var controller;
    controller = null;
    beforeEach(function() {
      return controller = new Controller();
    });
    afterEach(function() {
      return controller.dispose();
    });
    it('should mixin a EventBroker', function() {
      var name, value, _results;
      _results = [];
      for (name in EventBroker) {
        if (!__hasProp.call(EventBroker, name)) continue;
        value = EventBroker[name];
        _results.push(expect(controller[name]).to.be(EventBroker[name]));
      }
      return _results;
    });
    it('should redirect to a URL', function() {
      var routerRoute, url;
      expect(controller.redirectTo).to.be.a('function');
      routerRoute = sinon.spy();
      mediator.subscribe('!router:route', routerRoute);
      url = 'redirect-target/123';
      controller.redirectTo(url);
      expect(controller.redirected).to.be(true);
      expect(routerRoute).was.called();
      return expect(routerRoute.lastCall.args[0]).to.be(url);
    });
    it('should redirect to a controller action', function() {
      var action, controllerName, params, startupController;
      startupController = sinon.spy();
      mediator.subscribe('!startupController', startupController);
      controllerName = 'redirect-controller';
      action = 'redirect-action';
      params = {
        redirectParams: true
      };
      controller.redirectTo(controllerName, action, params);
      expect(controller.redirected).to.be(true);
      return expect(startupController).was.calledWith(controllerName, action, params);
    });
    it('should dispose itself correctly', function() {
      expect(controller.dispose).to.be.a('function');
      controller.dispose();
      expect(controller.disposed).to.be(true);
      if (Object.isFrozen) {
        return expect(Object.isFrozen(controller)).to.be(true);
      }
    });
    it('should dispose disposable properties', function() {
      var model, view;
      model = controller.model = new Model();
      view = controller.view = new View({
        model: model
      });
      controller.dispose();
      expect(_(controller).has('model')).to.not.be.ok();
      expect(_(controller).has('view')).to.not.be.ok();
      expect(model.disposed).to.be(true);
      return expect(view.disposed).to.be(true);
    });
    it('should unsubscribe from Pub/Sub events', function() {
      var pubSubSpy;
      pubSubSpy = sinon.spy();
      controller.subscribeEvent('foo', pubSubSpy);
      controller.dispose();
      mediator.publish('foo');
      return expect(pubSubSpy).was.notCalled();
    });
    return it('should be extendable', function() {
      var DerivedController, derivedController;
      expect(Controller.extend).to.be.a('function');
      DerivedController = Controller.extend();
      derivedController = new DerivedController();
      expect(derivedController).to.be.a(Controller);
      return derivedController.dispose();
    });
  });
});
