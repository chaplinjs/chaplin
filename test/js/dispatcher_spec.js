// Generated by CoffeeScript 1.4.0
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['underscore', 'chaplin/mediator', 'chaplin/controllers/controller', 'chaplin/dispatcher'], function(_, mediator, Controller, Dispatcher) {
  'use strict';
  return describe('Dispatcher', function() {
    var Test1Controller, Test2Controller, dispatcher, params, paramsId, redirectToControllerRoute, redirectToURLRoute, refreshParams, route1, route2;
    dispatcher = params = null;
    paramsId = 0;
    route1 = {
      controller: 'test1',
      action: 'show'
    };
    route2 = {
      controller: 'test2',
      action: 'show'
    };
    redirectToURLRoute = {
      controller: 'test1',
      action: 'redirectToURL'
    };
    redirectToControllerRoute = {
      controller: 'test1',
      action: 'redirectToController'
    };
    refreshParams = function() {
      return params = {
        changeURL: false,
        id: paramsId++
      };
    };
    Test1Controller = (function(_super) {

      __extends(Test1Controller, _super);

      function Test1Controller() {
        return Test1Controller.__super__.constructor.apply(this, arguments);
      }

      Test1Controller.prototype.historyURL = function(params) {
        return 'test1/' + (params.id || '');
      };

      Test1Controller.prototype.initialize = function(params, oldControllerName) {
        return Test1Controller.__super__.initialize.apply(this, arguments);
      };

      Test1Controller.prototype.show = function(params, oldControllerName) {};

      Test1Controller.prototype.redirectToURL = function(params, oldControllerName) {
        return this.redirectTo('/test2/123');
      };

      Test1Controller.prototype.redirectToController = function(params, oldControllerName) {
        return this.redirectTo('test2', 'show', params);
      };

      Test1Controller.prototype.dispose = function(params, newControllerName) {
        return Test1Controller.__super__.dispose.apply(this, arguments);
      };

      return Test1Controller;

    })(Controller);
    Test2Controller = (function(_super) {

      __extends(Test2Controller, _super);

      function Test2Controller() {
        return Test2Controller.__super__.constructor.apply(this, arguments);
      }

      Test2Controller.prototype.historyURL = function(params) {
        return 'test2/' + (params.id || '');
      };

      Test2Controller.prototype.initialize = function(params, oldControllerName) {
        return Test2Controller.__super__.initialize.apply(this, arguments);
      };

      Test2Controller.prototype.show = function(params, oldControllerName) {};

      Test2Controller.prototype.dispose = function(params, newControllerName) {
        return Test2Controller.__super__.dispose.apply(this, arguments);
      };

      return Test2Controller;

    })(Controller);
    define('controllers/test1_controller', function() {
      return Test1Controller;
    });
    define('controllers/test2_controller', function() {
      return Test2Controller;
    });
    beforeEach(refreshParams);
    it('should initialize', function() {
      return dispatcher = new Dispatcher();
    });
    it('should dispatch routes to controller actions', function() {
      var action, historyURL, initialize, proto;
      proto = Test1Controller.prototype;
      historyURL = sinon.spy(proto, 'historyURL');
      initialize = sinon.spy(proto, 'initialize');
      action = sinon.spy(proto, 'show');
      mediator.publish('matchRoute', route1, params);
      expect(initialize).was.calledWith(params, null);
      expect(action).was.calledWith(params, null);
      expect(historyURL).was.calledWith(params);
      historyURL.restore();
      initialize.restore();
      return action.restore();
    });
    it('should not start the same controller if params match', function() {
      var action, historyURL, initialize, proto;
      mediator.publish('matchRoute', route1, params);
      proto = Test1Controller.prototype;
      historyURL = sinon.spy(proto, 'historyURL');
      initialize = sinon.spy(proto, 'initialize');
      action = sinon.spy(proto, 'show');
      mediator.publish('matchRoute', route1, params);
      expect(initialize).was.notCalled();
      expect(action).was.notCalled();
      expect(historyURL).was.notCalled();
      historyURL.restore();
      initialize.restore();
      return action.restore();
    });
    it('should start the same controller if params differ', function() {
      var action, historyURL, initialize, proto;
      mediator.publish('matchRoute', route1, params);
      proto = Test1Controller.prototype;
      historyURL = sinon.spy(proto, 'historyURL');
      initialize = sinon.spy(proto, 'initialize');
      action = sinon.spy(proto, 'show');
      refreshParams();
      mediator.publish('matchRoute', route1, params);
      expect(initialize).was.calledWith(params, 'test1');
      expect(action).was.calledWith(params, 'test1');
      expect(historyURL).was.calledWith(params);
      historyURL.restore();
      initialize.restore();
      return action.restore();
    });
    it('should start the same controller if forced', function() {
      var action, historyURL, initialize, proto;
      mediator.publish('matchRoute', route1, params);
      proto = Test1Controller.prototype;
      historyURL = sinon.spy(proto, 'historyURL');
      initialize = sinon.spy(proto, 'initialize');
      action = sinon.spy(proto, 'show');
      params.forceStartup = true;
      mediator.publish('matchRoute', route1, params);
      expect(initialize).was.calledWith(params, 'test1');
      expect(action).was.calledWith(params, 'test1');
      expect(historyURL).was.calledWith(params);
      historyURL.restore();
      initialize.restore();
      return action.restore();
    });
    it('should save the controller, action, params and url', function() {
      var d;
      mediator.publish('matchRoute', route2, params);
      d = dispatcher;
      expect(d.previousControllerName).to.be('test1');
      expect(d.currentControllerName).to.be('test2');
      expect(d.currentController).to.be.a(Test2Controller);
      expect(d.currentAction).to.be('show');
      expect(d.currentParams).to.be(params);
      return expect(d.url).to.be("test2/" + params.id);
    });
    it('should dispose inactive controllers and fire beforeControllerDispose events', function() {
      var dispose, proto;
      proto = Test2Controller.prototype;
      dispose = sinon.spy(proto, 'dispose');
      mediator.publish('matchRoute', route1, params);
      expect(dispose).was.calledWith(params, 'test1');
      return dispose.restore();
    });
    it('should fire beforeControllerDispose events', function() {
      var beforeControllerDispose, passedController;
      beforeControllerDispose = sinon.spy();
      mediator.subscribe('beforeControllerDispose', beforeControllerDispose);
      mediator.publish('matchRoute', route2, params);
      expect(beforeControllerDispose).was.called();
      passedController = beforeControllerDispose.lastCall.args[0];
      expect(passedController).to.be.a(Test1Controller);
      expect(passedController.disposed).to.be(true);
      return mediator.unsubscribe('beforeControllerDispose', beforeControllerDispose);
    });
    it('should publish startupController events', function() {
      var passedEvent, startupController;
      startupController = sinon.spy();
      mediator.subscribe('startupController', startupController);
      mediator.publish('matchRoute', route1, params);
      passedEvent = startupController.lastCall.args[0];
      expect(passedEvent).to.be.an('object');
      expect(passedEvent.controller).to.be.a(Test1Controller);
      expect(passedEvent.controllerName).to.be('test1');
      expect(passedEvent.params).to.be(params);
      expect(passedEvent.previousControllerName).to.be('test2');
      return mediator.unsubscribe('startupController', startupController);
    });
    it('should listen to !startupController events', function() {
      var action, d, historyURL, initialize, proto;
      proto = Test1Controller.prototype;
      historyURL = sinon.spy(proto, 'historyURL');
      initialize = sinon.spy(proto, 'initialize');
      action = sinon.spy(proto, 'show');
      mediator.publish('!startupController', 'test1', 'show', params);
      expect(initialize).was.calledWith(params, 'test1');
      expect(action).was.calledWith(params, 'test1');
      expect(historyURL).was.calledWith(params);
      d = dispatcher;
      expect(d.previousControllerName).to.be('test1');
      expect(d.currentControllerName).to.be('test1');
      expect(d.currentController).to.be.a(Test1Controller);
      expect(d.currentAction).to.be('show');
      expect(d.currentParams).to.be(params);
      expect(d.url).to.be("test1/" + params.id);
      historyURL.restore();
      initialize.restore();
      return action.restore();
    });
    it('should support redirection to a URL', function() {
      var action, d, proto, startupController;
      proto = Test1Controller.prototype;
      action = sinon.spy(proto, 'redirectToURL');
      startupController = sinon.spy();
      mediator.subscribe('startupController', startupController);
      mediator.publish('matchRoute', redirectToURLRoute, params);
      expect(action).was.calledWith(params, 'test1');
      d = dispatcher;
      expect(d.previousControllerName).to.be('test1');
      expect(d.currentControllerName).to.be('test1');
      expect(d.currentController).to.be.a(Test1Controller);
      expect(d.currentAction).to.be('show');
      expect(d.currentParams).not.to.be(params);
      expect(d.url).not.to.be("test1/" + params.id);
      expect(startupController).was.notCalled();
      mediator.unsubscribe('startupController', startupController);
      return action.restore();
    });
    it('should support redirection to a controller action', function() {
      var d, proto, redirectAction, startupController, targetAction;
      proto = Test1Controller.prototype;
      redirectAction = sinon.spy(proto, 'redirectToController');
      proto = Test2Controller.prototype;
      targetAction = sinon.spy(proto, 'show');
      startupController = sinon.spy();
      mediator.subscribe('startupController', startupController);
      mediator.publish('matchRoute', redirectToControllerRoute, params);
      expect(redirectAction).was.calledWith(params, 'test1');
      expect(targetAction).was.calledWith(params, 'test1');
      d = dispatcher;
      expect(d.previousControllerName).to.be('test1');
      expect(d.currentControllerName).to.be('test2');
      expect(d.currentController).to.be.a(Test2Controller);
      expect(d.currentAction).to.be('show');
      expect(d.currentParams).to.be(params);
      expect(d.url).to.be("test2/" + params.id);
      expect(startupController).was.called();
      expect(startupController.callCount).to.be(1);
      mediator.unsubscribe('startupController', startupController);
      return redirectAction.restore();
    });
    it('should dispose itself correctly', function() {
      var initialize, proto;
      expect(dispatcher.dispose).to.be.a('function');
      dispatcher.dispose();
      proto = Test1Controller.prototype;
      initialize = sinon.spy(proto, 'initialize');
      mediator.publish('matchRoute', route1, params);
      expect(initialize).was.notCalled();
      expect(dispatcher.disposed).to.be(true);
      if (Object.isFrozen) {
        expect(Object.isFrozen(dispatcher)).to.be(true);
      }
      return initialize.restore();
    });
    return it('should be extendable', function() {
      var DerivedDispatcher, derivedDispatcher;
      expect(Dispatcher.extend).to.be.a('function');
      DerivedDispatcher = Dispatcher.extend();
      derivedDispatcher = new DerivedDispatcher();
      expect(derivedDispatcher).to.be.a(Dispatcher);
      return derivedDispatcher.dispose();
    });
  });
});
