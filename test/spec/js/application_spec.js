// Generated by CoffeeScript 1.3.3

define(['chaplin/mediator', 'chaplin/application', 'chaplin/lib/router', 'chaplin/dispatcher', 'chaplin/views/layout'], function(mediator, Application, Router, Dispatcher, Layout) {
  'use strict';
  return describe('Application', function() {
    var app;
    app = new Application();
    it('should be a simple object', function() {
      expect(typeof app).toBe('object');
      return expect(app instanceof Application).toBe(true);
    });
    it('should initialize', function() {
      expect(typeof app.initialize).toBe('function');
      return app.initialize();
    });
    it('should create a dispatcher', function() {
      expect(typeof app.initDispatcher).toBe('function');
      app.initDispatcher();
      return expect(app.dispatcher instanceof Dispatcher).toBe(true);
    });
    it('should create a layout', function() {
      expect(typeof app.initLayout).toBe('function');
      app.initLayout();
      return expect(app.layout instanceof Layout).toBe(true);
    });
    it('should create a router', function() {
      var passedMatch, routes, routesCalled;
      passedMatch = null;
      routesCalled = false;
      routes = function(match) {
        routesCalled = true;
        return passedMatch = match;
      };
      expect(typeof app.initRouter).toBe('function');
      expect(app.initRouter.length).toBe(2);
      app.initRouter(routes, {
        root: '/test/'
      });
      expect(app.router instanceof Router).toBe(true);
      expect(routesCalled).toBe(true);
      return expect(typeof passedMatch).toBe('function');
    });
    it('should start Backbone.history', function() {
      return expect(Backbone.History.started).toBe(true);
    });
    return it('should be disposable', function() {
      expect(typeof app.dispose).toBe('function');
      app.dispose();
      expect(app.dispatcher).toBe(null);
      expect(app.layout).toBe(null);
      expect(app.router).toBe(null);
      expect(app.disposed).toBe(true);
      if (Object.isFrozen) {
        return expect(Object.isFrozen(app)).toBe(true);
      }
    });
  });
});
